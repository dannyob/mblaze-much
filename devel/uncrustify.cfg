#
# Uncrustify config file for notmuch.
# Based on uncrustify config file for the linux kernel
#
# $Id: linux-indent.cfg 488 2006-09-09 12:44:38Z bengardner $
# Taken from the uncrustify distribution under license (GPL2+)
#
# Sample usage:
#        uncrustify --replace -c uncrustify.cfg foo.c
#

indent_with_tabs	= 2		# 1=indent to level only, 2=indent with tabs
align_with_tabs		= TRUE		# use tabs to align
align_on_tabstop	= TRUE          # align on tabstops
input_tab_size		= 8		# original tab size
output_tab_size		= 8		# new tab size
indent_columns		= 4

indent_label		= -2		# pos: absolute col, neg: relative column

indent_cmt_with_tabs	= false		# true would align to tabstop always...

#
# inter-symbol newlines
#

nl_enum_brace		= remove	# "enum {" vs "enum \n {"
nl_union_brace		= remove	# "union {" vs "union \n {"
nl_struct_brace		= remove	# "struct {" vs "struct \n {"
nl_do_brace             = remove	# "do {" vs "do \n {"
nl_if_brace             = remove	# "if () {" vs "if () \n {"
nl_for_brace            = remove	# "for () {" vs "for () \n {"
nl_else_brace           = remove	# "else {" vs "else \n {"
nl_while_brace          = remove	# "while () {" vs "while () \n {"
nl_switch_brace         = remove	# "switch () {" vs "switch () \n {"
nl_brace_while		= remove	# "} while" vs "} \n while" - cuddle while
nl_brace_else		= remove	# "} else" vs "} \n else" - cuddle else
nl_func_var_def_blk	= 1
nl_fcall_brace		= remove	# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace		= force		# "int foo() {" vs "int foo()\n{"
# nl_after_return		= TRUE;
# nl_before_case	= 1

# Add or remove newline between return type and function name in definition
nl_func_type_name	= force
nl_enum_leave_one_liners = True
nl_enum_brace = Remove
nl_after_struct = 0
#
# Source code modifications
#

# mod_paren_on_return	= remove	# "return 1;" vs "return (1);"
# mod_full_brace_if	= remove	# "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for	= remove	# "for () a--;" vs "for () { a--; }"
# mod_full_brace_do	= remove	# "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while	= remove	# "while (a) a--;" vs "while (a) { a--; }"


# In case some custom types aren't detected properly by uncrustify
# add those to this section below. For example there are cases where
# uncrustify doesn't know whether a 'token' is part of pointer type
# or left operand of a binary multiplication operation.

type FILE
type GMimeObject GMimeCryptoContext GMimeCipherContext
type mime_node_t notmuch_message_t notmuch_show_params_t
type sprinter_t

#
# inter-character spacing options
#

sp_before_ptr_star	= force
sp_between_ptr_star	= remove
sp_after_ptr_star	= remove
sp_not			= force
sp_pp_concat		= ignore	# XXX 'remove' drops leading space also
sp_pp_stringify		= remove

# sp _return_paren	= force		# "return (1);" vs "return(1);"
sp_sizeof_paren		= force		# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen	= force		# "if (" vs "if("
sp_after_sparen		= force		# "if () {" vs "if (){"
sp_sparen_brace		= force
sp_after_cast		= force		# "(int) a" vs "(int)a"
sp_inside_braces	= add		# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= add		# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= add		# "{ 1 }" vs "{1}"
sp_assign		= force
sp_arith		= force
sp_bool			= add
sp_compare		= add
sp_assign		= add
sp_after_comma		= add
sp_func_def_paren	= force		# "int foo (){" vs "int foo(){"
sp_func_call_paren	= force         # "foo (" vs "foo("
sp_func_proto_paren	= force		# "int foo ();" vs "int foo();"
sp_brace_else		= force         # "} else" vs "}else"
sp_else_brace		= force		# "else {" vs "else{"
#
# Aligning stuff
#

align_enum_equ_span	= 4		# '=' in enum definition
# align_nl_cont		= TRUE
# align_var_def_span	= 2
# align_var_def_inline	= TRUE
# align_var_def_star	= FALSE
# align_var_def_colon	= TRUE
# align_assign_span	= 1
align_struct_init_span	= 0		# align stuff in a structure init '= { }'
align_right_cmt_span	= 8		# align comments span this much in func
# align_pp_define_span	= 8;
# align_pp_define_gap	= 4;

cmt_star_cont		= true

# indent_brace		= 0
